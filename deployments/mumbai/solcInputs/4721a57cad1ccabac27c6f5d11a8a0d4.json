{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ForexPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./PriceConverter.sol\";\n\nerror ForexPrices__IndexOutOfRange();\nerror ForexPrices__NotOwner();\n\n/**\n * @title ForexPrices: a smart contract that lists the PriceFeeds of multiple tokens,forex, and commodoties\n * @author Jesus Badillo Jr.\n */\ncontract ForexPrices is Ownable {\n    /**\n     * Price Feeds for Polygon Mumbai\n        btcUsdPriceFeed: \"0x007A22900a3B98143368Bd5906f8E17e9867581b\",\n        daiUsdPriceFeed: \"0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046\",\n        ethUsdPriceFeed: \"0x0715A7794a1dc8e42615F059dD6e406A6594651A\",\n        eurUsdPriceFeed: \"0x7d7356bF6Ee5CDeC22B216581E48eCC700D0497A\",\n        linkMaticPriceFeed: \"0x1s2162c3E810393dEC01362aBf156D7ecf6159528\",\n        maticUsdPriceFeed: \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n        sandUsdPriceFeed: \"0x9dd18534b8f456557d11B9DDB14dA89b2e52e308\",\n        maticUsdPriceFeed: \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n        usdcUsdPriceFeed: \"0x572dDec9087154dC5dfBB1546Bb62713147e0Ab0\",\n        usdUsdtPriceFeed: \"0x92C09849638959196E976289418e5973CC96d645\",\n    **/\n\n    using PriceConverter for int256;\n\n    address private immutable i_owner;\n    address[] private s_priceFeedAddresses;\n    string[] private s_priceFeedNames;\n    mapping(address => string) public s_addressToPriceFeedName;\n    mapping(address => AggregatorV3Interface)\n        public s_addressToPriceFeedAggregator;\n\n    event AllPriceFeeds(address[] _priceFeeds, string[] _priceFeedNames);\n    event AddedNewPriceFeed(address _newPriceFeed, string _newPriceFeedName);\n    event RemovedPriceFeed(address _newPriceFeed, string _newPriceFeedName);\n\n    constructor(\n        address[] memory _priceFeedAddresses,\n        string[] memory _priceFeedNames\n    ) {\n        i_owner = owner();\n        s_priceFeedAddresses = _priceFeedAddresses;\n        s_priceFeedNames = _priceFeedNames;\n        setPriceFeedHashMap();\n    }\n\n    /**\n     * @dev Add a priceFeed to the contract\n     * @param _newPriceFeed the address of the priceFeed to be able to get information from the chainlink oracle\n     * @param _newPriceFeedName the name corresponding to the priceFeed passed into the contract\n     */\n    function addPriceFeed(\n        address _newPriceFeed,\n        string calldata _newPriceFeedName\n    ) public onlyOwner {\n        if (msg.sender != i_owner) {\n            revert ForexPrices__NotOwner();\n        }\n        s_priceFeedAddresses.push(_newPriceFeed);\n        s_priceFeedNames.push(_newPriceFeedName);\n        s_addressToPriceFeedName[_newPriceFeed] = _newPriceFeedName;\n        s_addressToPriceFeedAggregator[_newPriceFeed] = AggregatorV3Interface(\n            _newPriceFeed\n        );\n\n        emit AddedNewPriceFeed(_newPriceFeed, _newPriceFeedName);\n    }\n\n    /**\n     * @dev Remove a priceFeed from the contract\n     * @param _priceFeed the address of the priceFeed to be able to get information from the chainlink oracle\n     */\n    function removePriceFeed(address _priceFeed) public onlyOwner {\n        // Get the address corresponding to the deleted PriceFeed\n\n        if (msg.sender != i_owner) {\n            revert ForexPrices__NotOwner();\n        }\n\n        address emittedPriceFeedAddress = s_priceFeedAddresses[\n            s_priceFeedAddresses.length - 1\n        ];\n        s_priceFeedAddresses.pop();\n\n        // Get the name corresponding to deleted PriceFeed\n        string memory emittedPriceFeedName = s_priceFeedNames[\n            s_priceFeedNames.length - 1\n        ];\n        s_priceFeedNames.pop();\n\n        delete s_addressToPriceFeedName[_priceFeed];\n        delete s_addressToPriceFeedAggregator[_priceFeed];\n\n        emit RemovedPriceFeed(emittedPriceFeedAddress, emittedPriceFeedName);\n    }\n\n    function setPriceFeedHashMap() internal {\n        for (uint8 i = 0; i < s_priceFeedAddresses.length; i++) {\n            s_addressToPriceFeedName[\n                s_priceFeedAddresses[i]\n            ] = s_priceFeedNames[i];\n\n            s_addressToPriceFeedAggregator[\n                s_priceFeedAddresses[i]\n            ] = AggregatorV3Interface(s_priceFeedAddresses[i]);\n        }\n\n        emit AllPriceFeeds(s_priceFeedAddresses, s_priceFeedNames);\n    }\n\n    function getLatestPriceFromAddress(address _priceFeedAddress)\n        public\n        view\n        returns (int256)\n    {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            s_addressToPriceFeedAggregator[_priceFeedAddress]\n        );\n        (\n            ,\n            /*uint80 roundID*/\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n\n    function getAllPriceFeedAddresses() public view returns (address[] memory) {\n        return s_priceFeedAddresses;\n    }\n\n    function getAllPriceFeedNames() public view returns (string[] memory) {\n        return s_priceFeedNames;\n    }\n\n    function getPriceFeedNameFromIndex(uint256 _index)\n        public\n        view\n        returns (string memory)\n    {\n        if (_index >= s_priceFeedNames.length) {\n            revert ForexPrices__IndexOutOfRange();\n        }\n        return s_priceFeedNames[_index];\n    }\n\n    function getPriceFeedAddressFromIndex(uint256 _index)\n        public\n        view\n        returns (address)\n    {\n        if (_index >= s_priceFeedAddresses.length) {\n            revert ForexPrices__IndexOutOfRange();\n        }\n        return s_priceFeedAddresses[_index];\n    }\n\n    // function getPriceFeedFromAddress(address _priceFeedAddress)\n    //     public\n    //     view\n    //     returns (AggregatorV3Interface)\n    // {\n    //     return s_addressToPriceFeedAggregator[_priceFeedAddress];\n    // }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror PriceConverter__InvalidDecimals();\n\nlibrary PriceConverter {\n    function getDerivedPrice(\n        address _baseAddress,\n        address _quoteAddress,\n        uint8 _decimals\n    ) public view returns (int256) {\n        if (_decimals > uint8(0) && _decimals <= uint8(18)) {\n            revert PriceConverter__InvalidDecimals();\n        }\n\n        int256 decimals = int256(10**uint256(_decimals));\n        (int256 basePrice, uint8 baseDecimals) = getPriceAndDecimals(\n            _baseAddress\n        );\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\n\n        (int256 quotePrice, uint8 quoteDecimals) = getPriceAndDecimals(\n            _quoteAddress\n        );\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\n\n        return (basePrice * decimals) / quotePrice;\n    }\n\n    function getPriceAndDecimals(address _aggregatorAddress)\n        public\n        view\n        returns (int256, uint8)\n    {\n        (, int256 price, , , ) = AggregatorV3Interface(_aggregatorAddress)\n            .latestRoundData();\n        uint8 decimals = AggregatorV3Interface(_aggregatorAddress).decimals();\n\n        return (price, decimals);\n    }\n\n    function scalePrice(\n        int256 _price,\n        uint8 _priceDecimals,\n        uint8 _decimals\n    ) internal pure returns (int256) {\n        if (_priceDecimals < _decimals) {\n            return _price * int256(10**uint256(_decimals - _priceDecimals));\n        } else if (_priceDecimals > _decimals) {\n            return _price / int256(10**uint256(_priceDecimals - _decimals));\n        }\n        return _price;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}